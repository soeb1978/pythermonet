import numpy as np

from pythermonet.domain import AggregatedLoadInput, HeatPumpInput


def source_load_from_cop(
        heat_pump_load: float | np.ndarray, cop: float = 3,
        heating: bool = True
        ) -> float | np.ndarray:
    """
    Calculates the thermal load on the source given the heat pump
    load(s) and Coefficient Of Performance(COP).

    The thermal load on the source depends on whether the load is for
    heating or cooling. For heating the electricity usage adds to the
    supplied heat, and for cooling the source must also remove the heat
    generated by the electricity consumption

    - Heating: 'thermal_load = load * (1 - 1/COP)'
    - Cooling: 'thermal_load = load * (1 + 1/COP)'

    Parameters
    ----------
    heat_pump_load : float or array-like
        The total load on the heat pump(s) [W].

    cop : float or array-like, default=3.0
        The COP of the heat pump(s).

    heating : bool, default=True
        If True, calculates the heating network load.
        If False, calculates the cooling network load.

    Returns
    -------
    thermal_load : float or ndarray
        The portion of the thermal load that the source must provide or
        receive [W].
    """
    if heating:
        thermal_load = np.multiply(heat_pump_load, 1 - np.divide(1, cop))
    else:
        thermal_load = np.multiply(heat_pump_load, 1 + np.divide(1, cop))
    return thermal_load


def source_loads_all_timescales(
        model_file_input: AggregatedLoadInput | HeatPumpInput,
        heating: bool = True,
        ) -> float:
    """
    Calculates source thermal loads for all three time scales.

    This function wraps the 'source_load_from_cop' function to produce
    the thermal loads for yearly, seasonal, and peak time scales, either
    for heating or cooling mode.

    Parameters
    ----------
    model_file_input : AggregatedLoadInput or HeatPumpLoadInput
        Input data containing either the aggregate load or the
        individual heat pump loads and COP/EER values for the different
        time scales.

    heating : bool, default=True
        If True, calculates thermal load when the source supplies heat.
        If False, calculates thermal load when the source recieves heat.

    Returns
    -------
    loads : list of float
        A list containing the source thermal loads for the three time
        scales:
        - 'loads[0]': Yearly load [W]
        - 'loads[1]': Seasonal load [W]
        - 'loads[2]': Daily peak load [W]

    Notes
    -----
    - The simultaneity factor should be applied externally (only to the
      peak load) if relevant for your calculation.
    - This helper function is intended to be assigned directly to e.g.
      'aggLoad.P_s_H' or 'aggLoad.P_s_C' in your dimensioning workflow.
    """
    if isinstance(model_file_input, AggregatedLoadInput):
        if heating:
            return np.array([
                source_load_from_cop(
                    model_file_input.load_yearly_heating,
                    model_file_input.cop_yearly_heating,
                    heating=heating
                ),
                source_load_from_cop(
                    model_file_input.load_winter_heating,
                    model_file_input.cop_winter_heating,
                    heating=heating
                ),
                source_load_from_cop(
                    model_file_input.load_daily_peak_heating,
                    model_file_input.cop_hourly_peak_heating,
                    heating=heating
                )
            ])
        else:
            return np.array([
                source_load_from_cop(
                    model_file_input.load_yearly_cooling,
                    model_file_input.eer_cooling,
                    heating=heating
                ),
                source_load_from_cop(
                    model_file_input.load_summer_cooling,
                    model_file_input.eer_cooling,
                    heating=heating
                ),
                source_load_from_cop(
                    model_file_input.load_daily_peak_cooling,
                    model_file_input.eer_cooling,
                    heating=heating
                )
            ])
    if isinstance(model_file_input, HeatPumpInput):

        if heating:
            return np.array([
                source_load_from_cop(
                    model_file_input.loads_yearly_heating,
                    model_file_input.cops_yearly_heating,
                    heating=heating
                ),
                source_load_from_cop(
                    model_file_input.loads_winter_heating,
                    model_file_input.cops_winter_heating,
                    heating=heating
                ),
                source_load_from_cop(
                    model_file_input.loads_daily_peak_heating,
                    model_file_input.cops_hourly_peak_heating,
                    heating=heating
                )
            ]).T
        else:
            return np.array([
                source_load_from_cop(
                    model_file_input.loads_yearly_cooling,
                    model_file_input.eers_cooling,
                    heating=heating
                ),
                source_load_from_cop(
                    model_file_input.loads_summer_cooling,
                    model_file_input.eers_cooling,
                    heating=heating
                ),
                source_load_from_cop(
                    model_file_input.loads_daily_peak_cooling,
                    model_file_input.eers_cooling,
                    heating=heating
                )
            ]).T
